{"version":3,"sources":["constants.tsx","ResultsTable.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["classes","tweetNameMap","colours","DEVNULL","quarterfinals","ResultsTable","props","Table","striped","bordered","responsive","results","map","result","href","link","className","one","name","winner","icon","faCheckCircle","votes","style","two","toFixed","venueMap","VictoryZoomVoronoiContainer","createContainer","App","state","resultsKnockout","resultsQFinals","resultsHistories","fetch","history","this","json","setState","updateResults","updateHistory","bound","bind","setInterval","boundHist","gameString","res","resJSON","filter","tweet","game","includes","console","log","poll","options","label","gameName","tweetId","today","voting_status","venue","tuple","text","resBody","splitted","split","oneHere","match","parseInt","length","twoHere","stack","getUpdates","then","newquarterFinals","getUpdatesOld","Promise","all","Container","historydata","oneVotes","resultHere","x","timestamp","y","twoVotes","difference","Row","Col","sm","md","lg","horizontal","domainPadding","categories","height","width","padding","top","bottom","right","left","dependentAxis","fixLabelOverlap","axis","stroke","axisLabel","fontSize","tickLabels","grid","ticks","data","fill","datum","xName","labels","alignment","labelComponent","textAnchor","dx","strokeWidth","theme","VictoryTheme","material","containerComponent","voronoiDimension","radius","cornerRadius","flyoutStyle","parent","border","faGithub","faTwitter","faInstagram","faYoutube","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0def60bb.chunk.js","sourcesContent":["export const REALTIME_RESULTS = \"https://api.davwheat.dev/fullhistory\";\nexport const classes: { [key: string]: string; } = {\n  \"Bakerloo\": \"bakerloo\",\n  \"Northern\": \"northern\",\n  \"Jubilee\": \"jubilee\",\n  \"TfL Rail\": \"tflrail\",\n  \"Central\": \"central\",\n  \"District\": \"district\",\n  \"Circle\": \"circle\",\n  \"Thameslink\": \"thameslink\",\n  \"H&C\": \"handc\",\n  \"Victoria\": \"victoria\",\n  \"Metropolitan\": \"metropolitan\",\n  \"Trams\": \"trams\",\n  \"Overground\": \"overground\",\n  \"CableCar\": \"cablecar\",\n  \"DLR\": \"dlr\",\n  \"Piccadilly\": \"picadilly\",\n  \"???\": \"unknown\",\n};\nexport const tweetNameMap: { [key: string]: string; } = {\n  \"Bakerloo Line\": \"Bakerloo\",\n  \"Northern Line\": \"Northern\",\n  \"Jubilee Line\": \"Jubilee\",\n  \"TfL Rail\": \"TfL Rail\",\n  \"Central Line\": \"Central\",\n  \"District Line\": \"District\",\n  \"Circle Line\": \"Circle\",\n  \"Thameslink\": \"Thameslink\",\n  \"Hammersmith & City Line\": \"H&C\",\n  \"Victoria Line\": \"Victoria\",\n  \"Metropolitan Line\": \"Metropolitan\",\n  \"Trams\": \"Trams\",\n  \"London Overground\": \"Overground\",\n  \"Cable Car\": \"CableCar\",\n  \"DLR\": \"DLR\",\n  \"Piccadilly Line\": \"Piccadilly\",\n};\nexport const colours: { [key: string]: string; } = {\n  \"Bakerloo\": \"#B36305\",\n  \"Northern\": \"#000000\",\n  \"Jubilee\": \"#A0A5A9\",\n  \"TfL Rail\": \"rgb(0, 25, 168)\",\n  \"Central\": \"rgb(220, 36, 31)\",\n  \"District\": \"rgb(0, 125, 50)\",\n  \"Circle\": \"rgb(255, 211, 41)\",\n  \"Thameslink\": \"#E9438D\",\n  \"H&C\": \"rgb(244, 169, 190)\",\n  \"Victoria\": \"rgb(0, 152, 216)\",\n  \"Metropolitan\": \"rgb(155, 0, 88)\",\n  \"Trams\": \"rgb(0, 189, 25)\",\n  \"Overground\": \"rgb(239, 123, 16)\",\n  \"CableCar\": \"rgb(220, 36, 31)\",\n  \"DLR\": \"rgb(0, 175, 173)\",\n  \"Piccadilly\": \"rgb(0, 25, 168)\"\n};\nexport const DEVNULL = \"https://devnull-as-a-service.com/dev/null\";\nconst PREFIX = \"https://twitter.www.statshelix.com\";\nconst FULL_PREFIX = PREFIX + \"/api/Tweet/GetTweet?url=\";\nconst pairs = [\n  [\n    \"Bakerloo\",\n    \"Northern\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1320637628518223872\",\n    \"false\"\n  ],\n  [\n    \"Jubilee\",\n    \"TfL Rail\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1320637979858247680\",\n    \"false\"\n  ],\n  [\n    \"Central\",\n    \"District\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321001660479639552\",\n    \"false\",\n  ],\n  [\n    \"Circle\",\n    \"Thameslink\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321002110801108993\",\n    \"false\",\n  ],\n  [\n    \"H&C\",\n    \"Victoria\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321364991803621376\",\n    \"true\",\n  ],\n  [\n    \"Metropolitan\",\n    \"Trams\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321365302811217923\",\n    \"true\",\n  ],\n  [\n    \"Overground\",\n    \"CableCar\",\n    DEVNULL,\n    \"false\" // CHANGEME\n  ],\n  [\n    \"DLR\",\n    \"Piccadilly\",\n    DEVNULL,\n    \"false\" // CHANGEME\n  ]\n];\nexport const quarterfinals = [\n  [\n    \"District\",\n    \"Thameslink\",\n    DEVNULL,\n    \"false\",\n    \"Blackfriars\"\n  ],\n  [\n    \"Victoria\",\n    \"Metropolitan\",\n    DEVNULL,\n    \"false\",\n    \"King's Cross\"\n  ],\n  [\n    \"Overground\",\n    \"DLR\",\n    DEVNULL,\n    \"false\",\n    \"Shadwell\"\n  ],\n];\nexport interface StateInfo {\n  gameName: string;\n  one: {\n    name: string;\n    votes: number;\n    className: string;\n  };\n  two: {\n    name: string;\n    votes: number;\n    className: string;\n  };\n  winner: number;\n  link: string;\n  today: boolean;\n  venue?: string;\n}\nexport interface DavidAPI {\n  tweetId: string;\n  game: string;\n  poll: {\n    voting_status: string;\n    end_datetime: string;\n    id: string;\n    duration_minutes: string;\n    options: {\n      position: number;\n      label: string;\n      votes: number;\n    }[];\n  };\n}\nexport interface ResultHistories {\n  gane: string;\n  options: {\n    one: string;\n    two: string;\n  };\n  results: {\n    timestamp: number;\n    votes: {\n      one: number;\n      two: number;\n    };\n  }[];\n}\n","import React, { ReactNode } from \"react\"\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\"\nimport { Table } from \"react-bootstrap\"\nimport { StateInfo } from \"./constants\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\n\nconst ResultsTable: React.FunctionComponent<{\n\tresults: StateInfo[],\n\tchildren?: ReactNode;\n}> = (props) => {\n\treturn (\n\t\t<Table striped bordered responsive>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Link</th>\n\t\t\t\t\t<th>Line 1</th>\n\t\t\t\t\t<th>Votes</th>\n\t\t\t\t\t<th>%</th>\n\t\t\t\t\t<th>Line 2</th>\n\t\t\t\t\t<th>Votes</th>\n\t\t\t\t\t<th>%</th>\n\t\t\t\t\t<th>∆</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{\n\t\t\t\t\tprops.results.map((result) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td><a href={result.link}>View</a></td>\n\t\t\t\t\t\t\t\t<td className={result.one.className}>{result.one.name} {result.winner === 1 ? <FontAwesomeIcon icon={faCheckCircle} /> : \"\"}</td>\n\t\t\t\t\t\t\t\t<td>{result.one.votes}</td>\n\t\t\t\t\t\t\t\t<td style={{\n\t\t\t\t\t\t\t\t\t\"backgroundSize\": `100% ${((result.one.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%`\n\t\t\t\t\t\t\t\t}} className={result.one.className}>{((result.one.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%</td>\n\t\t\t\t\t\t\t\t<td className={result.two.className}>{result.two.name} {result.winner === 2 ? <FontAwesomeIcon icon={faCheckCircle} /> : \"\"}</td>\n\t\t\t\t\t\t\t\t<td>{result.two.votes}</td>\n\t\t\t\t\t\t\t\t<td style={{\n\t\t\t\t\t\t\t\t\t\"backgroundSize\": `100% ${((result.two.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%`\n\t\t\t\t\t\t\t\t}} className={result.two.className}>{((result.two.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%</td>\n\t\t\t\t\t\t\t\t<td>{result.one.votes > result.two.votes ? result.one.votes - result.two.votes : result.two.votes - result.one.votes}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</tbody>\n\t\t</Table>\n\t)\n}\n\nexport default ResultsTable;","import React, { Component } from \"react\";\nimport './App.css';\nimport { Col, Container, Row, Table } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { VictoryChart, VictoryTheme, VictoryBar, VictoryLabel, VictoryAxis, VictoryLine, VictoryVoronoiContainer, VictoryTooltip, VictoryZoomContainer, VictoryContainer, createContainer } from \"victory\";\nimport { faGithub, faInstagram, faTwitter, faYoutube } from \"@fortawesome/free-brands-svg-icons\";\nimport { StateInfo, ResultHistories, REALTIME_RESULTS, DavidAPI, tweetNameMap, classes, DEVNULL, quarterfinals, colours } from \"./constants\";\nimport ResultsTable from \"./ResultsTable\";\n\nconst venueMap: { [key: string]: string } = {\n  \"quartera1\": \"Waterloo\",\n  \"quartera2\": \"Blackfriars\",\n  \"quarterb3\": \"King's Cross\",\n  \"quarterb4\": \"Shadwell\",\n}\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n\nclass App extends Component<any, { resultsKnockout: StateInfo[], resultsQFinals: StateInfo[], resultsHistories: Record<string, ResultHistories> }> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      resultsKnockout: [],\n      resultsQFinals: [],\n      resultsHistories: {},\n    }\n  }\n\n  async updateHistory() {\n    //console.log(\"FITOWRST\");\n    const history = await fetch(REALTIME_RESULTS)\n    this.setState({\n      resultsHistories: (await history.json())\n    })\n    //console.log(\"FIRST\");\n  }\n\n  componentDidMount() {\n    this.updateResults();\n    this.updateHistory();\n    const bound = this.updateResults.bind(this);\n    setInterval(() => bound(), 20000);\n\n    const boundHist = this.updateHistory.bind(this);\n\n    setInterval(() => boundHist(), 60000)\n  }\n\n  async getUpdates(gameString: string): Promise<StateInfo[]> {\n    // NEW API\n    const res = await fetch(\"https://api.davwheat.dev/getpolls\");\n    const resJSON = await res.json();\n    return resJSON.filter((tweet: DavidAPI) => tweet.game.includes(gameString)).map((tweet: DavidAPI): StateInfo => {\n      console.log(tweetNameMap[tweet.poll.options[0].label])\n      return {\n        gameName: tweet.game,\n        one: {\n          name: tweetNameMap[tweet.poll.options[0].label] || \"???\",\n          votes: tweet.poll.options[0].votes,\n          className: classes[tweetNameMap[tweet.poll.options[0].label] || \"???\"]\n        },\n        two: {\n          name: tweetNameMap[tweet.poll.options[1].label] || \"???\",\n          votes: tweet.poll.options[1].votes,\n          className: classes[tweetNameMap[tweet.poll.options[1].label] || \"???\"]\n        },\n        winner: (\n          tweet.poll.options[0].votes > tweet.poll.options[1].votes ? 1 : 2\n        ),\n        link: \"https://twitter.com/geofftech/status/\" + tweet.tweetId,\n        today: tweet.poll.voting_status === \"open\" ? true : false,\n        venue: venueMap[tweet.game] || \"???\",\n      }\n    });\n  }\n\n  // Kept around because we need it for pending \n  async getUpdatesOld(tuple: string[]): Promise<StateInfo> {\n    let one: number = 0;\n    let two: number = 0;\n    let winner: number = 0;\n    try {\n      if (tuple[2] !== DEVNULL) {\n        // Can get it\n        const res = await fetch(tuple[2]);\n\n        const resBody = await res.text();\n        // Assume pairs in correct order\n        const splitted = resBody.split(\"\\n\");\n        const oneHere = splitted[0].match(/^\\d+|\\d+\\b|\\d+(?=\\w)/g) || [\"0\"];\n        one = parseInt(oneHere[0], 10);\n        if (oneHere.length > 1 && oneHere[1] === \"1\") {\n          winner = 1;\n        }\n\n        const twoHere = splitted[1].match(/^\\d+|\\d+\\b|\\d+(?=\\w)/g) || [\"0\"];\n        two = parseInt(twoHere[0], 10);\n        if (twoHere.length > 1 && twoHere[1] === \"1\") {\n          winner = 2;\n        }\n      }\n    } catch (err) {\n      console.log(err.stack);\n    } finally {\n      return {\n        gameName: \"unknown\",\n        one: {\n          name: tuple[0],\n          votes: one,\n          className: classes[tuple[0]]\n        },\n        two: {\n          name: tuple[1],\n          votes: two,\n          className: classes[tuple[1]]\n        },\n        winner,\n        link: tuple[2].split(\"url=\")[1],\n        today: tuple[3] === \"true\" ? true : false,\n        venue: tuple[4],\n      }\n    }\n  }\n\n  updateResults() {\n    //const newPairs: Promise<StateInfo>[] = pairs.map(this.getUpdates);\n    console.log(\"UPDATED\");\n\n    this.getUpdates(\"knockout\").then((results) => this.setState({\n      resultsKnockout: results,\n    }));\n\n    const newquarterFinals: Promise<StateInfo>[] = quarterfinals.map(this.getUpdatesOld);\n\n    Promise.all(newquarterFinals).then((resultsQFinals) => {\n      this.getUpdates(\"quarter\").then((results) => {\n        this.setState({\n          resultsQFinals: [\n            ...results,\n            ...resultsQFinals,\n          ],\n        })\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Tube Lines World Cup:</h1>\n          <h5>Updated every 20 secs. Please view in landscape.</h5>\n          <h6>Note: if no votes are showing, the API this site uses has gone down and should be back up in a few mins.</h6>\n        </div>\n        <h3>Quarterfinals:</h3>\n        <ResultsTable results={this.state.resultsQFinals} />\n        \n        \n        <h3>Today's games:</h3>\n        <h6>Straight lines represent votes in the same match from previous years.</h6>\n        <h6>Thin grey lines represent the difference between options.</h6>\n        <Container>\n            {\n            [...this.state.resultsKnockout, ...this.state.resultsQFinals].filter(result => result.today).map((result) => {\n\n                const historydata: ResultHistories = this.state.resultsHistories[result.gameName];\n                if (typeof historydata === \"undefined\") {\n                  return;\n                }\n\n                let oneVotes = historydata.results.map((resultHere) => {\n                  //console.log(resultHere.time - historydata.startTime);\n                  return {\n                    x: (resultHere.timestamp - historydata.results[0].timestamp) / 1000 / 60 / 60,\n                    y: resultHere.votes.one\n                  }\n                });\n                let twoVotes = historydata.results.map((resultHere) => {\n                  //console.log(resultHere.time - historydata.startTime);\n                  return {\n                    x: (resultHere.timestamp - historydata.results[1].timestamp) / 1000 / 60 / 60,\n                    y: resultHere.votes.two\n                  }\n                });\n\n                let difference = historydata.results.map((resultHere) => {\n                  return {\n                    x: (resultHere.timestamp - historydata.results[1].timestamp) / 1000 / 60 / 60,\n                    y: resultHere.votes.one > resultHere.votes.two ? resultHere.votes.one - resultHere.votes.two : resultHere.votes.two - resultHere.votes.one\n                  }\n                })\n\n                console.log(result.one.name);\n                console.log(result.two.name);\n            \n                return (\n                  <Row>\n                    <Col sm md lg>\n                      <VictoryChart\n                        horizontal={true}\n                        domainPadding={{ x: 100 }}\n                        categories={{ x: [result.one.name, result.two.name] }}\n                        height={350}\n                        width={500}\n                        padding={{\n                          top:0,\n                          bottom: 80,\n                          right: 10,\n                          left: 10\n                        }}\n                      >\n                        <VictoryAxis\n                          dependentAxis\n                          label=\"Votes\"\n                          fixLabelOverlap\n                          style={{\n                            axis: { stroke: \"#756f6a\" },\n                            axisLabel: { fontSize: 30, padding: 30 },\n                            tickLabels: { fontSize: 20, padding: 5 },\n                            grid: { stroke: \"grey\" },\n                            ticks: { stroke: \"grey\" },\n                          }}\n                        />\n                        <VictoryBar\n                          style={{\n                            data: { fill: ({datum}) => {\n                              //console.log(datum.xName);\n                              //console.log(colours[datum.xName]);\n                              return colours[datum.xName];\n                            }, width: 60 }, labels: {\n                              fill: \"#ffffff\",\n                              fontSize: 30,\n                            }\n                          }}\n                          alignment=\"middle\"\n                          labels={({ datum }) => `${datum.x}`}\n                          labelComponent={<VictoryLabel textAnchor={\"end\"} dx={-20} />}\n                          data={[\n                            { y: result.one.votes, x: result.one.name },\n                            { y: result.two.votes, x: result.two.name }\n                          ]}\n                        />\n                        <VictoryAxis\n                          fixLabelOverlap\n                          style={{\n                            axis: { stroke: \"#756f6a\" },\n                            axisLabel: { fontSize: 0, padding: 0 },\n                            tickLabels: { fontSize: 0, padding: 0 },\n                            grid: { stroke: \"grey\", strokeWidth: 0 },\n                            ticks: { strokeWidth: 0 },\n                          }}\n                        />\n                      </VictoryChart>\n                    </Col>\n                    {/*BEGIN LINES */}\n                    <Col sm md lg>\n                      <VictoryChart\n                        theme={VictoryTheme.material}\n                        height={350 * 1.5 - 50}\n                        width={750}\n                        domainPadding={{ y: 100 }}\n                        padding={{\n                          top: 0,\n                          bottom: 80,\n                          left: 100\n                        }}\n                        containerComponent={\n                          // @ts-ignore\n                          <VictoryZoomVoronoiContainer voronoiDimension=\"x\"\n                            radius={100000}\n                            // @ts-ignore\n                            labels={({ datum }) => `${datum.y}`}\n                            labelComponent={<VictoryTooltip cornerRadius={0} flyoutStyle={{ fill: \"white\", fontSize: 20 }} />}\n                          />\n                        }\n                      >\n                        <VictoryAxis\n                          dependentAxis\n                          label=\"Votes\"\n                          fixLabelOverlap\n                          style={{\n                            axis: { stroke: \"#756f6a\" },\n                            axisLabel: { fontSize: 20, padding: 40 },\n                            tickLabels: { fontSize: 20, padding: 5 },\n                            grid: { stroke: \"grey\" },\n                            ticks: { stroke: \"grey\" },\n                          }}\n                        />\n                        <VictoryAxis\n                          label=\"Time (hrs)\"\n                          fixLabelOverlap\n                          style={{\n                            axis: { stroke: \"#756f6a\" },\n                            axisLabel: { fontSize: 20, padding: 40 },\n                            tickLabels: { fontSize: 20, padding: 5 },\n                            grid: { stroke: \"grey\" },\n                            ticks: { stroke: \"grey\" },\n                          }}\n                        />\n                        {/* If Picadilly and DLR, PLOT */}\n                        {\n                          result.one.name === \"DLR\" && result.two.name === \"Piccadilly\" ?\n                            // DLR\n                            <VictoryLine\n                              name={result.one.name}\n                              style={{\n                                data: { stroke: colours[\"DLR\"], strokeWidth: 3 },\n                                parent: { border: \"1px solid #ccc\" },\n                              }}\n                              data={[\n                                {\n                                  x: 0,\n                                  y: 1711\n                                },\n                                {\n                                  x: (twoVotes[twoVotes.length - 1] || { x: 0 }).x,\n                                  y: 1711\n                                }\n                              ]}\n                            />\n                            : null\n                        }\n                        {\n                          result.one.name === \"DLR\" && result.two.name === \"Piccadilly\" ?\n                            // DLR\n                            <VictoryLine\n                              style={{\n                                data: { stroke: colours[\"Piccadilly\"], strokeWidth: 3 },\n                                parent: { border: \"1px solid #ccc\" }\n                              }}\n                              data={[\n                                {\n                                  x: 0,\n                                  y: 1882\n                                },\n                                {\n                                  x: (twoVotes[twoVotes.length - 1] || { x: 0 }).x,\n                                  y: 1882\n                                }\n                              ]}\n                            />\n                            : null\n                        }\n                        <VictoryLine\n                          style={{\n                            data: { stroke: \"rgb(65, 75, 86)\", strokeWidth: 2 },\n                            parent: { border: \"1px solid #ccc\" },\n                          }}\n                          data={difference}\n                        />\n                        <VictoryLine\n                          style={{\n                            data: { stroke: colours[result.one.name], strokeWidth: 5 },\n                            parent: { border: \"1px solid #ccc\" },\n                            labels: {\n                              fill: colours[result.one.name]\n                            }\n                          }}\n                          data={oneVotes}\n                        />\n                        <VictoryLine\n                          style={{\n                            data: { stroke: colours[result.two.name], strokeWidth: 5 },\n                            parent: { border: \"1px solid #ccc\" },\n                            labels: {\n                              fill: colours[result.two.name]\n                            }\n                          }}\n                          data={twoVotes}\n                        />\n                      </VictoryChart>\n                    </Col>\n                  </Row>\n                )\n              })\n            }\n        </Container>\n\n        <h3>Knockout stage results:</h3>\n        <ResultsTable results={this.state.resultsKnockout} />\n\n        <h3>Past games:</h3>\n        <Container>\n          <Row>\n            {\n              this.state.resultsKnockout.filter(result => !result.today && typeof result.link !== \"undefined\").map((result) => {\n                return (\n                  <Col sm md lg>\n                    <VictoryChart\n                      horizontal={true}\n                      domainPadding={{ x: 100 }}\n                      categories={{ x: [result.one.name, result.two.name] }}\n                      height={350}\n                      //width={500}\n                      padding={{\n                        top: 0,\n                        bottom: 80,\n                        right: 10,\n                        left: 10\n                      }}\n                    >\n                      <VictoryAxis\n                        dependentAxis\n                        label=\"Votes\"\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 30, padding: 30 },\n                          tickLabels: { fontSize: 20, padding: 5 },\n                          grid: { stroke: \"grey\" },\n                          ticks: { stroke: \"grey\" },\n                        }}\n                      />\n                      <VictoryBar\n                        style={{\n                          data: {\n                            fill: ({ datum }) => {\n                              //console.log(datum.xName);\n                              //console.log(colours[datum.xName]);\n                              return colours[datum.xName];\n                            }, width: 60\n                          }, labels: {\n                            fill: \"#ffffff\",\n                            fontSize: 30,\n                          }\n                        }}\n                        alignment=\"middle\"\n                        labels={({ datum }) => `${datum.x}`}\n                        labelComponent={<VictoryLabel textAnchor={\"end\"} dx={-20} />}\n                        data={[\n                          { y: result.one.votes, x: result.one.name },\n                          { y: result.two.votes, x: result.two.name }\n                        ]}\n                      />\n                      <VictoryAxis\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 0, padding: 0 },\n                          tickLabels: { fontSize: 0, padding: 0 },\n                          grid: { stroke: \"grey\", strokeWidth: 0 },\n                          ticks: { strokeWidth: 0 },\n                        }}\n                      />\n                    </VictoryChart>\n                  </Col>\n                )\n              })\n            }\n          </Row>\n        </Container>\n\n        <footer>\n          <Container>\n            Created by @k_sam_mighty for <a href=\"https://twitter.com/geofftech\">Geoff Marshall's</a> World Cup of Tube Lines.<br/>\n            Find me (@k_sam_mighty) here:<br />\n            <a href=\"https://github.com/Gum-Joe\"><FontAwesomeIcon icon={faGithub} /> Gum-Joe</a> <br />\n            <a href=\"hhttps://twitter.com/official_gumjoe\"><FontAwesomeIcon icon={faTwitter} /> @official_gumjoe</a> <br />\n            <a href=\"https://www.instagram.com/k_sam_mighty\"><FontAwesomeIcon icon={faInstagram} /> @k_sam_mighty</a> <br />\n            <a href=\"https://www.youtube.com/channel/UCIwdVs7v-WL7_5erRzNv6sw\"><FontAwesomeIcon icon={faYoutube} /> Gum Joe</a>\n            <br />\n            Special thanks to <a href=\"https://github.com/davwheat\">@davwheat</a> for the API, and <a href=\"https://twitter.com/_FlaiFlai\">@_FlaiFlai</a> for the original API.\n            <br />Thank you to all the memebers of the community who contributed ideas!\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}