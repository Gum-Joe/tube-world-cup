{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["classes","colours","PREFIX","pairs","App","Component","props","state","results","this","updateResults","bind","newPairs","map","tuple","a","one","two","winner","fetch","res","text","resBody","splitted","split","oneHere","match","parseInt","length","twoHere","name","votes","className","link","today","Promise","all","then","setState","Table","striped","bordered","responsive","result","icon","faCheckCircle","style","toFixed","href","Container","Row","filter","Col","sm","md","lg","horizontal","domainPadding","x","categories","height","padding","top","bottom","right","left","dependentAxis","label","fixLabelOverlap","axis","stroke","axisLabel","fontSize","tickLabels","grid","ticks","data","fill","datum","console","log","xName","width","labels","alignment","labelComponent","textAnchor","dx","y","strokeWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.653e196a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { Col, Container, Row, Table } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight, faCheckCircle, faTicketAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { Bar, BarChart, CartesianGrid, Legend, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { VictoryChart, VictoryTheme, VictoryBar, VictoryLabel, VictoryAxis } from \"victory\";\n\n\nconst classes: { [key: string]: string } = {\n  \"Bakerloo\": \"bakerloo\",\n  \"Northern\": \"northern\",\n  \"Jubilee\": \"jubilee\",\n  \"TfL Rail\": \"tflrail\",\n  \"Central\": \"central\",\n  \"District\": \"district\",\n  \"Circle\": \"circle\",\n  \"Thames Link\": \"thameslink\"\n}\n\nconst colours: { [key: string]: string } = {\n  \"Bakerloo\": \"#B36305\",\n  \"Northern\": \"#000000\",\n  \"Jubilee\": \"#A0A5A9\",\n  \"TfL Rail\": \"rgb(0, 25, 168)\",\n  \"Central\": \"rgb(220, 36, 31)\",\n  \"District\": \"rgb(0, 125, 50)\",\n  \"Circle\": \"rgb(255, 211, 41)\",\n  \"Thames Link\": \"#E9438D\"\n}\n\nconst DEVNULL = \"https://devnull-as-a-service.com/dev/null\";\nconst PREFIX = \"https://gentle-wildflower-0e5e.kishansambhi.workers.dev/?https://twitter.www.statshelix.com\"\n\nconst pairs = [\n  [\n    \"Bakerloo\",\n    \"Northern\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1320637628518223872\",\n    \"false\"\n  ],\n  [\n    \"Jubilee\",\n    \"TfL Rail\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1320637979858247680\",\n    \"false\"\n  ],\n  [\n    \"Central\",\n    \"District\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321001660479639552\",\n    \"true\",\n  ],\n  [\n    \"Circle\",\n    \"Thames Link\",\n    PREFIX + \"/api/Tweet/GetTweet?url=https://twitter.com/geofftech/status/1321002110801108993\",\n    \"true\",\n  ]\n]\n\ninterface StateInfo {\n  one: {\n    name: string;\n    votes: number;\n    className: string;\n  };\n  two: {\n    name: string;\n    votes: number;\n    className: string;\n  };\n  winner: number;\n  link: string;\n  today: boolean;\n}\n\nclass CustomizedLabel extends Component<{ [key:string]: any }> {\n\n  render() {\n    const { x, y, fill, value } = this.props;\n    return <text\n      x={x}\n      y={y}\n\n      fontSize='16'\n      fontFamily='sans-serif'\n      fill={fill}\n      textAnchor=\"start\">{value}%</text>\n  }\n};\n\nclass App extends Component<any, { results: StateInfo[] }> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      results: []\n    }\n  }\n\n  componentDidMount() {\n    this.updateResults();\n    const bound = this.updateResults.bind(this);\n    //setInterval(() => bound(), 30000);\n  }\n\n  updateResults() {\n    const newPairs: Promise<StateInfo>[] = pairs.map(async (tuple): Promise<StateInfo> => {\n      let one: number = 0;\n      let two: number = 0;\n      let winner: number = 0;\n      try {\n        if (tuple[2] !== DEVNULL) {\n          // Can get it\n          const res = await fetch(tuple[2]);\n\n          const resBody = await res.text();\n          // Assume pairs in correct order\n          const splitted = resBody.split(\"\\n\");\n          const oneHere = splitted[0].match(/^\\d+|\\d+\\b|\\d+(?=\\w)/g) || [\"0\"];\n          one = parseInt(oneHere[0], 10);\n          if (oneHere.length > 1 && oneHere[1] === \"1\") {\n            winner = 1;\n          }\n\n          const twoHere = splitted[1].match(/^\\d+|\\d+\\b|\\d+(?=\\w)/g) || [\"0\"];\n          two = parseInt(twoHere[0], 10);\n          if (twoHere.length > 1 && twoHere[1] === \"1\") {\n            winner = 2;\n          }\n\n        }\n      } catch (err) {\n        //console.log(err.stack);\n      } finally {\n        return {\n          one: {\n            name: tuple[0],\n            votes: one,\n            className: classes[tuple[0]]\n          },\n          two: {\n            name: tuple[1],\n            votes: two,\n            className: classes[tuple[1]]\n          },\n          winner,\n          link: tuple[2].split(\"url=\")[1],\n          today: tuple[3] === \"true\" ? true : false,\n        }\n      }\n    });\n\n    Promise.all(newPairs).then((results) => this.setState({\n      results,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Tube Lines World Cup:</h1>\n          <h5>Updated every 30 secs. Please view in landscape.</h5>\n        </div>\n        <h3>Knockout stage games:</h3>\n        <Table striped bordered responsive>\n          <thead>\n            <tr>\n              <th>Line 1</th>\n              <th>Votes</th>\n              <th>%</th>\n              <th>Line 2</th>\n              <th>Votes</th>\n              <th>%</th>\n              <th>Link</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.results.map((result) => {\n                return (\n                  <tr>\n                    <td className={result.one.className}>{result.one.name} { result.winner === 1 ? <FontAwesomeIcon icon={faCheckCircle}/> : \"\" }</td>\n                    <td>{result.one.votes}</td>\n                    <td style={{\n                      \"backgroundSize\": `100% ${((result.one.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%`\n                    }} className={result.one.className}>{((result.one.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%</td>\n                    <td className={result.two.className}>{result.two.name} {result.winner === 2 ? <FontAwesomeIcon icon={faCheckCircle} /> : \"\"}</td>\n                    <td>{result.two.votes}</td>\n                    <td style={{\n                      \"backgroundSize\": `100% ${((result.two.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%`\n                    }} className={result.two.className}>{((result.two.votes / (result.one.votes + result.two.votes) * 100) || 0).toFixed(1)}%</td>\n                    <td><a href={result.link}>View</a></td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </Table>\n        \n        \n        <h3>Today's games:</h3>\n        <Container>\n          <Row>\n            {\n              this.state.results.filter(result => result.today).map((result) => {\n            \n                return (\n                  <Col sm md lg>\n                    <VictoryChart\n                      horizontal={true}\n                      domainPadding={{ x: 100 }}\n                      categories={{ x: [result.one.name, result.two.name] }}\n                      height={350}\n                      //width={500}\n                      padding={{\n                        top:0,\n                        bottom: 80,\n                        right: 10,\n                        left: 10\n                      }}\n                    >\n                      <VictoryAxis\n                        dependentAxis\n                        label=\"Votes\"\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 30, padding: 30 },\n                          tickLabels: { fontSize: 20, padding: 5 },\n                          grid: { stroke: \"grey\" },\n                          ticks: { stroke: \"grey\" },\n                        }}\n                      />\n                      <VictoryBar\n                        style={{\n                          data: { fill: ({datum}) => {\n                            console.log(datum.xName);\n                            console.log(colours[datum.xName]);\n                            return colours[datum.xName];\n                          }, width: 60 }, labels: {\n                            fill: \"#ffffff\",\n                            fontSize: 30,\n                          }\n                        }}\n                        alignment=\"middle\"\n                        labels={({ datum }) => `${datum.x}`}\n                        labelComponent={<VictoryLabel textAnchor={\"end\"} dx={-20} />}\n                        data={[\n                          { y: result.one.votes, x: result.one.name },\n                          { y: result.two.votes, x: result.two.name }\n                        ]}\n                      />\n                      <VictoryAxis\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 0, padding: 0 },\n                          tickLabels: { fontSize: 0, padding: 0 },\n                          grid: { stroke: \"grey\", strokeWidth: 0 },\n                          ticks: { strokeWidth: 0 },\n                        }}\n                      />\n                    </VictoryChart>\n                  </Col>\n                )\n              })\n            }\n          </Row>\n        </Container>\n\n        <h3>Past games:</h3>\n        <Container>\n          <Row>\n            {\n              this.state.results.filter(result => !result.today).map((result) => {\n\n                return (\n                  <Col sm md lg>\n                    <VictoryChart\n                      horizontal={true}\n                      domainPadding={{ x: 100 }}\n                      categories={{ x: [result.one.name, result.two.name] }}\n                      height={350}\n                      //width={500}\n                      padding={{\n                        top: 0,\n                        bottom: 80,\n                        right: 10,\n                        left: 10\n                      }}\n                    >\n                      <VictoryAxis\n                        dependentAxis\n                        label=\"Votes\"\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 30, padding: 30 },\n                          tickLabels: { fontSize: 20, padding: 5 },\n                          grid: { stroke: \"grey\" },\n                          ticks: { stroke: \"grey\" },\n                        }}\n                      />\n                      <VictoryBar\n                        style={{\n                          data: {\n                            fill: ({ datum }) => {\n                              console.log(datum.xName);\n                              console.log(colours[datum.xName]);\n                              return colours[datum.xName];\n                            }, width: 60\n                          }, labels: {\n                            fill: \"#ffffff\",\n                            fontSize: 30,\n                          }\n                        }}\n                        alignment=\"middle\"\n                        labels={({ datum }) => `${datum.x}`}\n                        labelComponent={<VictoryLabel textAnchor={\"end\"} dx={-20} />}\n                        data={[\n                          { y: result.one.votes, x: result.one.name },\n                          { y: result.two.votes, x: result.two.name }\n                        ]}\n                      />\n                      <VictoryAxis\n                        fixLabelOverlap\n                        style={{\n                          axis: { stroke: \"#756f6a\" },\n                          axisLabel: { fontSize: 0, padding: 0 },\n                          tickLabels: { fontSize: 0, padding: 0 },\n                          grid: { stroke: \"grey\", strokeWidth: 0 },\n                          ticks: { strokeWidth: 0 },\n                        }}\n                      />\n                    </VictoryChart>\n                  </Col>\n                )\n              })\n            }\n          </Row>\n        </Container>\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}